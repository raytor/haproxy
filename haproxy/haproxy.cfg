# HApDocker
#
global
        log 127.0.0.1:514  local0
        log /dev/log/haproxy    local0 info
        chroot /var/lib/haproxy
        stats socket /var/haproxy/admin.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        #Default setting haproxy
        log global
        mode http
        option httplog
		option dontlognull
        option logasap
        #log-format "%ci %cp %si %sp %HU %ST"
        #Timeout setting
#       maxconn 524288
        timeout connect 5s
        timeout client  30s
        timeout server  30s
        timeout client-fin 1s
        timeout server-fin 1s
        timeout http-request 10s
        timeout http-keep-alive 50s

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

cache webmaster_cache
        # total size, MB
        total-max-size 200
        # max size of item, bytes
        max-object-size 74000
        # TTL for each item, sec.
        max-age 180

cache media_cache
        total-max-size 200 # MB
        max-object-size 10000000 #bytes
        max-age 1800 # sec.

#=============== WEB page statistics ===================#
listen stats
        bind *:8080
        mode http
#       option forwardfor
#		option http-ignore-probes	#Para ocultar en los logs el codigo con el error 408
        option httpclose
        stats enable
        stats show-legends
        stats refresh 60s
        stats uri /stats
        stats realm Haproxy\ Statistics
        stats auth Henderson:Henderson            #Login User and Password for the monitoring
        stats admin if TRUE


#=============== FRONTENDS ===================#
frontend domain-henderson
        mode http
        http-request set-header x-forwarded-for %[src]
#       log-format "client_adres = %ci, serv_adres = %si, status = %ST, URL: %HU %{+E}HQ LOAD %Tc, resp_time= %Tr, backend_queue= %bq %sq"
#       log-format "client_adres = %ci, serv_adres = %si, status = %ST, URL: %HU %{+E}HQ LOAD %Tc, resp_time= %Tr, backend_queue= %bq, srv_queue= %sq %Tt"
        log-format "client_add = %[src], qrator_add = %ci, srv_add = %si, status = %ST, URL: %HU %{+E}HQ LOAD %Tc %Tr %bq %sq"
        #указываем сеть исключения для логирования
        option forwardfor except 192.168.60.0/24
        bind *:80
        bind *:443 ssl crt /usr/local/etc/haproxy/certs alpn h2,http/1.1
        #
        # Redirecting from http to https
        http-request redirect scheme https code 301 unless { ssl_fc }
        #
        # Указывает броузеру клиента иницировать подключению по https  протоколу, это около пол года
        http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
        #
        # нашел - не  нашел то что искал в CACHE
        http-response set-header X-Cache-Status gool if !{ srv_id -m found }
        http-response set-header X-Cache-Status mimo if { srv_id -m found }
        #
        # Переадрезация henderson.am to henderson.ru
#       http-request redirect prefix https://henderson.ru code 301 if { hdr(host) -i henderson.am }
#       http-request redirect prefix https://henderson.ru code 301 if { hdr(host) -i xn--d1acwcelh1a6e.xn--p1ai }
        acl host_ru_site hdr(host) -i henderson.ru
        acl host_ru_site hdr(host) -i henderson.am
#       acl host_am_site hdr_beg(host) -i sumisura.am
        acl host_academy hdr_beg(host) -i academy
        acl host_factory hdr_beg(host) -i factory
        acl host_api hdr(host) -i api.henderson.ru
        acl host_api2 hdr(host) -i api2.henderson.ru
        acl host_ap02 hdr(host) -i remainsall.henderson.ru
        acl host_s_desk hdr(host) -i servicedesk.henderson.ru
        acl host_corp hdr(host) -i corp.henderson.ru
        acl host_static hdr_beg(host) -i static
        #
        use_backend main_ru_cluster if host_ru_site
        use_backend academy if host_academy
        use_backend factory if host_factory
        use_backend api_cluster if host_api
        use_backend api2_cluster if host_api2
        use_backend remainsall if host_ap02
        use_backend s_desk if host_s_desk
        use_backend static.henderson if host_static
        use_backend corp.henderson if host_corp
        # Любой другой входящий запрос по умолчанию поидет на henderson,ru
        default_backend main_ru_cluster
#       log 127.0.0.1:514 local0 info

#=============== BACKENDS ===================#
backend main_ru_cluster
        mode http
        #=====Get from cache / put in cache =======
        http-request cache-use webmaster_cache if { path_end .mp4 .svg .jpg .gif }
        http-response cache-store webmaster_cache
        #=========================================
        option httpchk GET https://henderson.ru/lb/check_http.aspx
        http-check expect status 200
        balance roundrobin
        option forwardfor header X-Forwarded-For
        cookie HAPkube insert indirect nocache
#       dynamic-cookie-key mysecretphrase
        #=====Servers list =====================
        server web01 192.168.4.20:80 check cookie node01 inter 10s fall 3 rise 2 #defaults
        server web02 192.168.4.21:80 check cookie node02 inter 10s fall 2 rise 2
        server web03 192.168.4.35:80 check cookie node03 inter 10s fall 2 rise 2
        server web11 192.168.4.61:80 check cookie node11 inter 10s fall 2 rise 2
        server web12 192.168.4.62:80 check cookie node12 inter 10s fall 2 rise 2
        server web13 192.168.4.63:80 check cookie node13 inter 10s fall 2 rise 2
#       server weblab 192.168.3.73:80 check cookie weblab inter 10s fall 2 rise 2
#       log 127.0.0.1:514 local0 info

backend api2_cluster
        mode http
        balance roundrobin
        server api01 192.168.5.15:80,443 check inter 10s fall 3 rise 2
        server api02 192.168.5.16:80 check inter 10s fall 3 rise 2
        server api03 192.168.5.17:80 check inter 10s fall 3 rise 2
        log 127.0.0.1:514 local0 info

backend api_cluster
        mode http
        server web06 192.168.4.22:443 check inter 10s fall 3 rise 2 ssl verify none

backend s_desk
        mode http
        server intrasevice01 192.168.4.28:443 check inter 10s fall 3 rise 2 ssl verify none
#        log 127.0.0.1:514 local0 info

backend factory
        mode http
        #=========================================
        # use the cache webmaster for all requests
        http-request cache-use media_cache if { path_beg -i /pages/img /uimages }
        http-request cache-use media_cache if { path_end -i .mp4 .svg .jpg .gif }
        # store http request in cache
        http-response cache-store media_cache
        #=========================================
        cookie HAPNODE01 insert indirect nocache dynamic
        dynamic-cookie-key mysecretphrase
        #=========================================
        server factory 192.168.5.13:443 check cookie fct-13 inter 10s fall 3 rise 2 ssl verify none

backend academy
        mode http
        #=====Get from cache / put in cache =======
        # inserting webmaster cache for all requests
        http-request cache-use media_cache if { path_beg -i /pages/img /uimages }
        http-request cache-use media_cache if { path_end -i .mp4 .svg .jpg .gif }
        # store http request in cache
        http-response cache-store media_cache
        #=========================================
        server kuber_pod_academy 192.168.32.200:80 check inter 10s fall 3 rise 2

backend static.henderson
        mode http
        server static01 192.168.3.169:80 check fall 5 inter 13s rise 2
        server static02 192.168.3.170:80 check fall 5 inter 13s rise 2

backend corp.henderson
        mode http
        server ap02 192.168.3.19:80 check cookie ap02 fall 5 inter 13s rise 2
        
backend remainsall
        mode http
        server remainsall 192.168.3.73:80 check cookie ap2 fall 5 inter 13s rise 2
#=======================For Prometheus===================#
listen metrics
        no log
        bind *:8405
        #mode http
        stats enable
        stats uri /metrics
        stats refresh 10s
        http-request use-service prometheus-exporter if { path /metrics }
        # https://www.haproxy.com/documentation/hapee/latest/observability/metrics/prometheus/

